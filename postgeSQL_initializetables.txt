CREATE TABLE users (id SERIAL PRIMARY KEY, 
username VARCHAR NOT NULL,
hash VARCHAR NOT NULL,
cash NUMERIC NOT NULL);

CREATE TABLE portfolio ( 
user_id INTEGER REFERENCES users, 
symbol VARCHAR NOT NULL, 
shares INTEGER NOT NULL);

CREATE TABLE transactions (
id SERIAL PRIMARY KEY, 
user_id INTEGER REFERENCES users, 
symbol VARCHAR NOT NULL,
shares INTEGER NOT NULL, 
shareprice NUMERIC NOT NULL,
totalprice NUMERIC NOT NULL, 
date DATE NOT NULL, 
time TIME NOT NULL);

creating sessions table via ORM in python:
import os

from flask import Flask, flash, jsonify, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash
import datetime
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

from helpers import apology, login_required, lookup, usd, vetPassword

# Configure application and database engine
app = Flask(__name__)
## engine = create_engine(os.getenv("DATABASE_URL"))
## db = scoped_session(sessionmaker(bind=engine))

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response

# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
# app.config["SESSION_FILE_DIR"] = mkdtemp()
# app.config["SESSION_PERMANENT"] = False
# app.config["SESSION_TYPE"] = "filesystem"
# Session(app)

# Configure session to use memcache
app.config["SECRET_KEY"] = os.environ.get("SECRET_KEY")
## for creating models
app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv("DATABASE_URL")
app.config["SESSION_TYPE"] = "sqlalchemy"

## for creating models
db = SQLAlchemy(app)

app.config["SESSION_SQLALCHEMY"] = db
Session(app)

##
db.create_all()

--
adding primary key to portfolio table to avoid error - SQLAlchemy ORM needs primary key:
"sqlalchemy.exc.ArgumentError: Mapper mapped class Portfolio->portfolio could not assemble any primary key columns for mapped table 'portfolio'"

CREATE TABLE portfolio (
id SERIAL PRIMARY KEY,
user_id INTEGER REFERENCES users, 
symbol VARCHAR NOT NULL, 
shares INTEGER NOT NULL);


--
try with JSON:

CREATE TABLE portfolio (
id SERIAL PRIMARY KEY,
user_id INTEGER REFERENCES users,
stock JSON NOT NULL);

# symbol VARCHAR NOT NULL, 
# shares INTEGER NOT NULL);

insert JSON value into portfolio:
INSERT INTO portfolio (user_id, stock) VALUES ('5','{ "symbol": "DIS", "shares": 10 }');

--
replace portfolio table with stocks table (rename)

CREATE TABLE stocks (
id SERIAL PRIMARY KEY,
user_id INTEGER REFERENCES users,
stock JSON NOT NULL);

insert JSON value into portfolio:
INSERT INTO stocks (user_id, stock) VALUES ('5','{ "symbol": "DIS", "shares": 10 }');

--
another idea to try later:
CREATE TABLE portfolios (
id SERIAL PRIMARY KEY,
user_id INTEGER REFERENCES users,
portfolio JSON NOT NULL);

insert JSON value into portfolios:
INSERT INTO portfolios (user_id, portfolio) VALUES ('5','{ "stock": {"symbol": "DIS", "shares": 10}}');
--
best current practice:
CREATE TABLE positions (
id SERIAL PRIMARY KEY,
user_id INTEGER REFERENCES users, 
symbol VARCHAR NOT NULL, 
shares INTEGER NOT NULL);

INSERT INTO positions (user_id, symbol, shares) VALUES ('5','DIS','10');
INSERT INTO positions (user_id, symbol, shares) VALUES ('5','CAT','5');
INSERT INTO positions (user_id, symbol, shares) VALUES ('5','MSFT','15');
INSERT INTO positions (user_id, symbol, shares) VALUES ('5','AAPL','5');




